unclass(today.date)
date1 <- as.POSIXct("2015-05-28 01:00:00")
date2 <- as.POSIXct("2015-06-28 01:00:00")
date1–date2
datein<-date1-date2
datein
x <- matrix(1:8, 2, 4)
apply(x, 2, mean)
x
apply(x, 2, sum)
apply(x,1,function(x) x/2)
library(datasets)
data(iris
)
?iris
rowMeans(iris[, 1:4])
colMeans(iris[,1:4])
View(iris)
colMeans(iris[,1:4])
library(datasets)
data(mtcars)
View(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mpg,mean)
lapply(data,mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
mean(mtcars[mtcars$hp == "8"])
mean(mtcars[mtcars$cyl == "8",]$mpg) - mean(mtcars[mtcars$cyl == "4",]$mpg)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
debug(ls)
ls
ls
mean(mtcars[mtcars$cyl == "8",]$mpg) - mean(mtcars[mtcars$cyl == "4",]$mpg)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x
m
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
m
makevector(8)
cachemean(8)
N = rep(0,10)
generation=rep(0,10)
N[1]=1
generation[1]=1
for (i in 2:10) {
N[i] = 2*N[i-1]
generation[i]=i
print (N[i])
}
plot(N~generation)
num_gen=10
N = rep(0,num_gen)
generation=rep(0,num_gen)
N[1]=1
for (i in 2:num_gen) {
N[i] = growth.rate*N[i-1] #we replace 2 with growth.rate
generation[i]=i
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(
set=set,
get=get,
setinverse=setinverse,
getinverse=getinverse
)
}
m
makeCacheMatrix(1)
makeCacheMatrix(10)
makeCacheMatrix(1:8)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cahemean(2)
cachemean(2)
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(
set=set,
get=get,
setinverse=setinverse,
getinverse=getinverse
)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data.")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
swirl()
library(swirl)
swirl()
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum)
top_unique <- filter(pack_sum,unique>465)
view()
view(top_unique)
View()
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result2)
View(result3)
cran %>%
select() %>%
print
result4 <-
cran%<%
select() %>%
print(result4)
result4 <-
cran %<%
select() %>%
print(result4)
result4 <-
cran %>%
select() %>%
print(result4)
View(result4)
submit()
submit()
submit()
submit()
submit()
reset()
?mutate
?select
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
exit
bye
info()
bye()
exit
exit()
bye()
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
56b637a5baffac62cad9
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret="6af1109f6ecf442d292425087d49bb13d9bbe9c8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
lines <- c(htmlCode[10], htmlCode[20], htmlCode[30], htmlCode[100])
nchar(lines)
downloadDir <- './data'
if (!file.exists(dataDir)) {
dir.create(dataDir)
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
dataFile <- file.path(paste(downloadDir, "getdata_Fwksst8110.for", sep="/"))
download.file(fileUrl, destfile=dataFile, method="curl")
data <- read.fwf(dataFile, skip = 4, widths=c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3))
https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for
swirl()
library(swirl)
swirl()
my_vector(1:20)
my_vector<-(1:20)
my_vector<-c(1:20)
my_vector<-seq(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients<-("Bill", "Gina", "Kelly", "Sean")
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age","weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
true==true
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 = 7 !TRUE
5 != 7
5 == 7 !TRUE
5 == 7 = !TRUE
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE,
| FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.date()
Sys.Date()
exit
exit()
bye()
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
Xmean <- sum(temp["X",] * temp["Prob",])
Xmean
Ppregnant_pos = 0.75*0.30/(0.75*0.30+0.48*0.70)
round(Ppregnant_pos*100)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x, w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ 0 + x)$coeff
data(mtcars)
lm(mpg ~ wt, data=mtcars)
0.5 * 1 / 0.5
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x - mean(x)) / sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)$coef
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
beta1<- cor(y,x) * sd(y)/sd(x)
y1<-cor(x,y) * sd(x)/sd(y)
beta1/y1 = (sd(y)^2) / (sd(x)^2) = var(y) / var(x)
data(mtcars)
str(mtcars)
mtcars$trans <- as.factor(mtcars$trans)
levels(mtcars$trans) <-c("AT", "MT")
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <-c("AT", "MT")
View(mtcars)
mpg.at <- mtcars[mtcars$am == "AT",]$mpg
mpg.mt <- mtcars[mtcars$am == "MT",]$mpg
t.test(mpg.at, mpg.mt)
model1 <- lm(mpg ~ am, data = mtcars)
summary(model1)
model.all <- lm(mpg ~ ., data=mtcars)
model.best <- step(model.all, trace=0)
summary(model.best)
hist(mtcars$mpg, breaks=12, xlab="miles per gallon", main="mpg histogram", col="pink")
boxplot(mpg ~ am, data=mtcars, xlab="Transmission Type", ylab="Miles per Gallon",
main="Automatic versus Manual Transmission MPG")
par(mfrow = c(2,2))
plot(model.best)
library(swirl)
swirl()
swirl()
pbinom(2, size=5, 0.8, lower.tail=FALSE)
pbinom(2, size=5, 0.8, lower.tail=FALSE)
qnorm(prob)
qnorm(.1)
qnorm(.5)
qnorm(.975, mean=3, sd=2)
;
;
qnorm(.975, mean=3, sd=2)
1.96*2 + 3
pnorm(1200, mean=1020, sd=50)
pnorm(1200, mean=1020, sd=50, lower.tail=FALSE)
pnorm(1200, mean=1020, sd=50, lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75, mean=1020, sd=50, lower.tail=true)
qnorm(.75, mean=1020, sd=50, lower.tail=TRUE)
pnorm(qnorm(.53))
pnorm(qnorm(.53))
ppois(3, mean=(2.5*4), lower.tail+FALSE, log.p=FALSE)
ppois(3, mean=10, lower.tail+FALSE, log.p=FALSE)
ppois(3, lambda=10, lower.tail+FALSE, log.p=FALSE)
ppois(3, lambda=10, lower.tail=FALSE, log.p=FALSE)
ppois(3,2.5 * 4)
pbinom(.01, mean=4)
pbinom(.01, size=1000, 5)
pbinom(5,1000,.01)
ppois(5, lambda=1000*.001)
ppois(5, lambda=1000*.01)
library(swirl)
swirl()
subject <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
examinations <- data.frame(subject, baseline, week2)
examinations
test <- t.test(x = examinations$baseline, y = examinations$week2, alt = "two.sided", paired = TRUE)
pval <- test$p.value
round(pval,3)
n <- 9
μ <- 1100
σ <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = μ + c(-1, 1) * qt(quantile, df=n-1) * σ / sqrt(n)
confidenceInterval
n <- 4
x <- 3
test <- binom.test(x=x, n=n, alt="greater")
round(test$p.value,2)
n_y <- 9 # subjects treated
n_x <- 9 # subjects placebo
σ_y <- 1.5# kg/m2 std.dev. treated
σ_x <- 1.8# kg/m2 std.dev. placebo
μ_y <- -3#  kg/m2 average difference treated
μ_x <- 1#  kg/m2 average difference placebo
# calculate pooled standard deviation
σ_p <- (((n_x - 1) * σ_x^2 + (n_y - 1) * σ_y^2)/(n_x + n_y - 2))
pval <- pt((μ_y - μ_x) / (σ_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2)
pval
library(swirl)
swirl
swirl()
library(swirl)
install_from_courses("Regression_Models")
install_from_swirl("Regression_Models")
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child ~ parent,galton)
fit <- lm(child ~ parent,galton)
summary(fit)
fit$residual
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(ols)
varChild <- var(ols.ic)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varEast)
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
all.equa(mean(residual),0)
all.equal(mean(residual),0)
all.equal(mean(res),0)
all.equal(mean(varRes),0)
mean(efit$residuals)
cov(attenu$mag)
cov(efit$residuals, attenu$mag)
mean(atten$mag, attenu$dist)
cov(efit$residuals, attenu$dist)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='nursaadah', token='103300EDD6CD17056F6A45C69812059D', secret='YwYDrXkMCqgfuuXip+QHwr8LHRl8JhZzMCmLrBnU')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
library(rsconnect)
devtools::install_github('rstudio/rsconnect')
install.packages('devtools')
devtools::install_github('rstudio/rsconnect')
library(devtools)
install_github('ramnathv/rCharts')
library.packages('devtools')
install.packages('devtools')
devtools::install_github('rstudio/rsconnect')
library(rsconnect)
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
shinyapps::setAccountInfo(name='nursaadah', token='103300EDD6CD17056F6A45C69812059D', secret='YwYDrXkMCqgfuuXip+QHwr8LHRl8JhZzMCmLrBnU')
library(shinyapp)
server <-function(input, output) {}
shinyApp(ui= ui, server = server)
setwd("C:/Users/BPTM_10_837/Google Drive/MOOC Data Science/### DATA SCIENCE MATERIALS ### - Copy/Module 9 - Developing Data Products/shiny/airpollutant")
shiny::runApp()
getwd()
require(shiny)
library(shiny)
shiny::runApp()
